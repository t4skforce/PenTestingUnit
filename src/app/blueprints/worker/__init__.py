from flask import Blueprint, g
from ...lib.models import *
from ... import app, db, socketio
from gps3 import gps3
import eventlet, traceback, time

worker = Blueprint('worker', __name__, template_folder='templates', static_url_path='/static', static_folder='../../views/static')

def gps_worker():
    with app.app_context():
        data = Gpsd.query.get(1)
        if data is None:
            data = Gpsd(1,False,0.0,0.0)
            db.session.add(data)
            db.session.commit()
    while True:
        eventlet.sleep(5)
        gpsd_socket = gps3.GPSDSocket()
        try:
            gpsd_socket.connect(host='127.0.0.1', port=2947)
            gpsd_socket.watch()
            data_stream = gps3.DataStream()
            for new_data in gpsd_socket:
                if new_data:
                    data_stream.unpack(new_data)
                    changed = False
                    with app.app_context(): data = Gpsd.query.get(1)
                    if data_stream.TPV['lat'] != 'n/a':
                        # we just gained a gps fix
                        if data.fix == False:
                            data.fix = True
                            changed = True
                        # lat changed
                        if data.lat!=data_stream.TPV['lat']:
                            data.lat=data_stream.TPV['lat']
                            changed = True
                        # lon changed
                        if data.lon!=data_stream.TPV['lon']:
                            data.lon=data_stream.TPV['lon']
                            changed = True

                        data.alt = data_stream.TPV['alt']
                        data.speed = data_stream.TPV['speed']
                        data.heading = data_stream.TPV['track']
                        data.climb = data_stream.TPV['climb']
                        data.total_satellites = 0
                        data.used_satellites = 0
                        satellites = data_stream.SKY['satellites']
                        if isinstance(satellites, list):
                            for satellite in satellites:
                                data.total_satellites += 1
                                if satellite['used'] is True:
                                    data.used_satellites += 1
                    elif data.fix == True: # we just lost the fix
                        data.fix = False
                        changed = True
                    # sonething change notify clients
                    if changed == True:
                        socketio.emit('gps', data.json)
                        with app.app_context(): db.session.commit()
                eventlet.sleep(1)
        except Exception as e:
            app.logger.error(traceback.format_exc())
        finally:
            try:
                gpsd_socket.close()
            except:
                pass
eventlet.spawn(gps_worker)

def login_required(f):
    @functools.wraps(f)
    def wrapped(*args, **kwargs):
        if not current_user.is_authenticated: disconnect()
        else: return f(*args, **kwargs)
    return wrapped

@app.context_processor
def inject_data():
    return dict(gps=Gpsd.query.get(1).json)
