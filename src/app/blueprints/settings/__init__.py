from flask import Blueprint, render_template, redirect, request, g, url_for, jsonify
from flask_login import login_required
from ... import app, db
from ...lib.passwords import SystemPasswords
from ...lib.systemd import Systemd
from forms.passwords import PasswordsForm
from gps3 import gps3

settings = Blueprint('settings', __name__, template_folder='templates', static_url_path='/static', static_folder='../../views/static', url_prefix='/settings')
thread = None

@settings.route('/passwords.html',methods=['GET','POST'])
@login_required
def passwords():
    form = PasswordsForm()
    if form.validate_on_submit():
        changed = False
        if form.appuser.data:
            if not SystemPasswords(db,g.user).app(password):
                flash('App password change error','danger')
                return render_template('passwords.html',form=form)
            flash('App password changed','success')
            changed = True
        if form.sshuser.data:
            if not SystemPasswords.ssh(password):
                flash('SSH password change error','danger')
                return render_template('passwords.html',form=form)
            flash('SSH password changed','success')
            changed = True
        if form.wlanuser.data:
            if len(password) < 8:
                flash('Password has to be at least 8 chars for WLAN!','danger')
                return render_template('passwords.html',form=form)
            if not SystemPasswords.wlan(password):
                flash('WLAN password change error','danger')
                return render_template('passwords.html',form=form)
            flash('WLAN password changed','success')
            changed = True
        if changed == True:
            return redirect(url_for('session.logout'))
        else:
            flash('No passwords for change selected','warning')
    return render_template('passwords.html',form=form)

def redirect_url(default='map.live'):
    return request.args.get('next') or \
           request.referrer or \
           url_for(default)

@settings.route('/wlantoggle',methods=['GET'])
@login_required
def togglewifi():
    if Systemd.running('kismet'):
        Systemd.stop('kismet')
    else:
        Systemd.start('kismet')
    return redirect(redirect_url())

@settings.route('/gpstoggle',methods=['GET'])
@login_required
def togglegps():
    if Systemd.running('gpsd'):
        Systemd.stop('gpsd')
    else:
        Systemd.start('gpsd')
    return redirect(redirect_url())

@settings.route('/wlan.json',methods=['GET'])
@login_required
def wlanstatus():
    data = {'active': Systemd.running('kismet')}
    return jsonify(data)

@settings.route('/gps.json',methods=['GET'])
def gpsstatus():
    data = {'fix': False }
    try:
        gpsd_socket = gps3.GPSDSocket()
        gpsd_socket.connect(host='127.0.0.1', port=2947)
        gpsd_socket.watch()
        data_stream = gps3.DataStream()
        for new_data in gpsd_socket:
            if new_data:
                data_stream.unpack(new_data)
            if data_stream.TPV['lat'] != 'n/a':
                data = {'fix': True, 'lat':data_stream.TPV['lat'], 'lon':data_stream.TPV['lon'] }
                app.logger.debug('gps_status: '+str(data))
                break;
    except Exception, e:
        app.logger.error(e)
    finally:
        gpsd_socket.close()
    return jsonify(data)
