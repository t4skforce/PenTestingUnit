from ...lib.models import *
from ... import app, db, socketio
from ...lib.systemd import Systemd
from gps3 import gps3
import eventlet, traceback, time
from kismetclient import Client as KismetClient, handlers
from kismet_helper import ssid_parse

def setup():
    pass
    """
    with app.app_context():
        data = Gpsd.query.get(1)
        if data is None:
            data = Gpsd(1,False,0.0,0.0)
            db.session.add(data)
            db.session.commit()
    """

def service_change(running):
    pass
    """
    with app.app_context():
        data = Gpsd.query.get(1)
        if data.disabled == running:
            data.disabled = (running == False)
            if data.disabled == True:
                data.fix = False
            db.session.commit()
            socketio.emit('gpsd', data.json)
    """

def worker():
    setup()
    while True:
        running = Systemd.running('kismet')
        if running == True:
            service_change(running)
            try:
                address = ('127.0.0.1', 2501)
                kismet = KismetClient(address)
                # kismet.register_handler('SSID', handlers.print_fields)
                # kismet.register_handler('BSSID', handlers.print_fields)
                # kismet.register_handler('CLIENT', handlers.print_fields)
                while True:
                    kismet.listen()
            except Exception as e:
                # only display error if service is running
                app.logger.error(traceback.format_exc())
        else:
            service_change(running)
        eventlet.sleep(1)

def handle_data(data_stream):
    pass
