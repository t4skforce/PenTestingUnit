from ...lib.models import *
from ... import app, db, socketio
from ...lib.systemd import Systemd
from gps3 import gps3
import eventlet, traceback, time
from kismetclient import Client as KismetClient, handlers
from kismet_helper import bssid_parse, ssid_parse
from sqlalchemy.exc import IntegrityError

def handle_ssid_data(client, **fields):
    data = ssid_parse(client, **fields)
    if not data is None:
        with app.app_context():
            wifi = db.session.merge(WiFi(data.get('mac')))
            wifi.ssid = data.get('ssid')
            wifi.crypto = data.get('crypto')
            db.session.commit()

def handle_bssid_data(client, **fields):
    data = bssid_parse(client, **fields)
    if not data is None:
        with app.app_context():
            wifi = db.session.merge(WiFi(data.get('bssid')))
            wifi.channel = int(data.get('channel'))
            wifi.lon = float(data.get('lon'))
            wifi.lat = float(data.get('lat'))
            wifi.alt = float(data.get('alt'))
            db.session.commit()

def worker():
    while True:
        if Systemd.running('kismet'):
            try:
                address = ('127.0.0.1', 2501)
                kismet = KismetClient(address)
                kismet.register_handler('SSID', handle_ssid_data)
                kismet.register_handler('BSSID', handle_bssid_data)
                # kismet.register_handler('CLIENT', handlers.print_fields)
                while True:
                    try:
                        kismet.listen()
                    except IntegrityError:
                        pass
            except Exception as e:
                # only display error if service is running
                app.logger.error(traceback.format_exc())
        eventlet.sleep(1)
