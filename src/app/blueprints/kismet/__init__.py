from flask import Blueprint, redirect, url_for, request, jsonify
from functools import wraps
from flask_login import login_required
from ...lib.models import *
from ... import app, db, socketio
from ...lib.systemd import Systemd
import eventlet, traceback, time
from sqlalchemy import and_

kismet = Blueprint('kismet', __name__, template_folder='templates', static_url_path='/static', static_folder='../../views/static', url_prefix='/wifi')

from kismet_client import worker
eventlet.spawn_after(10,worker)

def sockerio_login_required(f):
    @wraps(f)
    def wrapped(*args, **kwargs):
        if not current_user.is_authenticated: disconnect()
        else: return f(*args, **kwargs)
    return wrapped

@app.context_processor
def inject_kismet():
    return dict(kismet=Systemd.running('kismet'))

def redirect_url(default='map.live'):
    return request.args.get('next') or \
           request.referrer or \
           url_for(default)

@kismet.route('/toggle',methods=['GET'])
@login_required
def toggle():
    if Systemd.running('kismet'):
        Systemd.stop('kismet')
        socketio.emit('kismet', False)
    else:
        Systemd.start('kismet')
        socketio.emit('kismet', True)
    return redirect(redirect_url())

@kismet.route('/data.json', methods=['GET'])
@login_required
def wlan():
    lat1 = request.args.get('lat1', None)
    lat2 = request.args.get('lat2', None)
    lon1 = request.args.get('lon1', None)
    lon2 = request.args.get('lon2', None)
    if not lat1 is None and not lat2 is None and not lon1 is None and not lon2 is None:
        wifis = WiFi.query.filter(WiFi.lat >= lat1,WiFi.lat <= lat2, WiFi.lon >= lon1, WiFi.lon <= lon2).limit(100).all()
        return jsonify([x.json for x in wifis])
    return jsonify([])
