from flask import Blueprint, render_template, redirect, request, g, url_for, jsonify
from flask_login import login_required
from ... import app, db
from ...lib.passwords import SystemPasswords
from ...lib.system import System
from forms.passwords import PasswordsForm
from gps3 import gps3

system = Blueprint('system', __name__, template_folder='templates', static_url_path='/static', static_folder='../../views/static', url_prefix='/system')

@system.route('/passwords.html',methods=['GET','POST'])
@login_required
def passwords():
    form = PasswordsForm()
    if form.validate_on_submit():
        changed = False
        if form.appuser.data:
            if not SystemPasswords(db,g.user).app(password):
                flash('App password change error','danger')
                return render_template('passwords.html',form=form)
            flash('App password changed','success')
            changed = True
        if form.sshuser.data:
            if not SystemPasswords.ssh(password):
                flash('SSH password change error','danger')
                return render_template('passwords.html',form=form)
            flash('SSH password changed','success')
            changed = True
        if form.wlanuser.data:
            if len(password) < 8:
                flash('Password has to be at least 8 chars for WLAN!','danger')
                return render_template('passwords.html',form=form)
            if not SystemPasswords.wlan(password):
                flash('WLAN password change error','danger')
                return render_template('passwords.html',form=form)
            flash('WLAN password changed','success')
            changed = True
        if changed == True:
            return redirect(url_for('session.logout'))
        else:
            flash('No passwords for change selected','warning')
    return render_template('passwords.html',form=form)

def redirect_url(default='map.live'):
    return request.args.get('next') or \
           request.referrer or \
           url_for(default)

@system.route('/restart.json',methods=['POST'])
@login_required
def restart():
    return jsonify({'status':System.reboot()})

@system.route('/shutdown.json',methods=['POST'])
@login_required
def shutdown():
    return jsonify({'status':System.shutdown()})

@system.route('/nuke.json',methods=['POST'])
@login_required
def nuke():
    return jsonify({'status':System.nuke()})
