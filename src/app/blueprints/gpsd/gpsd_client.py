from ...lib.models import *
from ... import app, db, socketio
from ...lib.systemd import Systemd
from gps3 import gps3
import eventlet, traceback, time

def setup():
    with app.app_context():
        data = Gpsd.query.get(1)
        if data is None:
            data = Gpsd(1,False,0.0,0.0)
            db.session.add(data)
            db.session.commit()

def service_change(running):
    with app.app_context():
        data = Gpsd.query.get(1)
        if data.disabled == running:
            data.disabled = (running == False)
            if data.disabled == True:
                data.fix = False
            db.session.commit()
            socketio.emit('gpsd', data.json)

def worker():
    setup()
    while True:
        running = Systemd.running('gpsd')
        if running == True:
            service_change(running)
            gpsd_socket = gps3.GPSDSocket()
            try:
                gpsd_socket.connect(host='127.0.0.1', port=2947)
                gpsd_socket.watch()
                data_stream = gps3.DataStream()
                for new_data in gpsd_socket:
                    if new_data:
                        data_stream.unpack(new_data)
                        handle_data(data_stream)
                    else:
                        eventlet.sleep(.1)
                    eventlet.sleep(.8)
                    if not Systemd.running('gpsd'):
                        service_change(False)
                        break
            except Exception as e:
                # only display error if service is running
                app.logger.error(traceback.format_exc())
            finally:
                try:
                    gpsd_socket.close()
                except:
                    pass
        else:
            service_change(running)
        eventlet.sleep(1)

def handle_data(data_stream):
    changed = False
    with app.app_context():
        data = Gpsd.query.get(1)
        if data_stream.TPV['lat'] != 'n/a':
            # we just gained a gps fix
            if data.fix == False:
                data.fix = True
                changed = True
            # lat changed
            if data.lat!=data_stream.TPV['lat']:
                data.lat=data_stream.TPV['lat']
                changed = True
            # lon changed
            if data.lon!=data_stream.TPV['lon']:
                data.lon=data_stream.TPV['lon']
                changed = True
            data.alt = data_stream.TPV['alt']
            data.speed = data_stream.TPV['speed']
            data.heading = data_stream.TPV['track']
            data.climb = data_stream.TPV['climb']
            data.total_satellites = 0
            data.used_satellites = 0
            satellites = data_stream.SKY['satellites']
            if isinstance(satellites, list):
                for satellite in satellites:
                    data.total_satellites += 1
                    if satellite['used'] is True:
                        data.used_satellites += 1
        elif data.fix == True: # we just lost the fix
            data.fix = False
            changed = True
        # sonething change notify clients
        # print('changed:'+str(changed)+' '+str(data.json))
        if changed == True:
            socketio.emit('gpsd', data.json)
            db.session.commit()
