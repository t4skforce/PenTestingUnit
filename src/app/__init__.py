import os
import sys
import logging
import atexit
from flask import Flask, g, session
from werkzeug.contrib.profiler import ProfilerMiddleware
from flask_assets import Environment
from flask_session import Session
from flask_login import LoginManager
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__, template_folder='templates', static_url_path='/static', static_folder='views/static')
app.logger.addHandler(logging.StreamHandler(sys.stdout))
assets = Environment()
sess = Session()
db = SQLAlchemy()
login_manager = LoginManager()

def flaskrun(options):
    # use environemnt variables for config
    app.config.update(os.environ)
    app.config["SECRET_KEY"]=os.urandom(512)
    app.config["SERVER_OPTIONS"]=options
    app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://ptu:ptu@localhost:3306/ptu'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    import routes
    if not options.debug:
        if options.verbosity <= 1: app.logger.setLevel(logging.ERROR)
        elif options.verbosity <= 2: app.logger.setLevel(logging.WARNING)
        elif options.verbosity <= 3: app.logger.setLevel(logging.INFO)
    else:
        app.logger.setLevel(logging.DEBUG)
        app.jinja_env.cache = None
        app.config['ASSETS_DEBUG'] = "merge"
    app.config['ASSETS_CACHE'] = "/tmp"
    if options.trace:
        app.config['PROFILE'] = True
        app.wsgi_app = ProfilerMiddleware(app.wsgi_app, restrictions=[30])
    assets.init_app(app)
    db.init_app(app)
    app.config['SESSION_TYPE'] = 'sqlalchemy'
    app.config['SESSION_SQLALCHEMY'] = db
    sess.init_app(app)
    login_manager.init_app(app)
    login_manager.login_view = 'login'
    if options.ssl == True:
        from lib.ssl import getSSLContext
        app.run(host=options.host,port=int(options.port),ssl_context=getSSLContext(app),debug=options.debug,use_reloader=options.debug,threaded=True)
    else:
        app.run(host=options.host,port=int(options.port),debug=options.debug,use_reloader=options.debug,threaded=True,processes=10)
