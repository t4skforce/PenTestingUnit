import os
import sys
import logging
import atexit
from flask import Flask, g, session
from werkzeug.contrib.profiler import ProfilerMiddleware
from flask_socketio import SocketIO
from flask_assets import Environment
from flask_session import Session
from flask_login import LoginManager
from flask_sqlalchemy import SQLAlchemy
from flask_wtf.csrf import CSRFProtect
from flask_nav import register_renderer

try:
    from wtforms.fields import HiddenField
except ImportError:
    def is_hidden_field_filter(field):
        raise RuntimeError('WTForms is not installed.')
else:
    def is_hidden_field_filter(field):
        return isinstance(field, HiddenField)

app = Flask(__name__, template_folder='templates', static_url_path='/static', static_folder='views/static')
app.logger.addHandler(logging.StreamHandler(sys.stdout))
assets = Environment()
sess = Session()
csrf = CSRFProtect()
db = SQLAlchemy()
login_manager = LoginManager()

def flaskrun(options):
    # use environemnt variables for config
    app.config.update(os.environ)
    app.config["SECRET_KEY"]=os.urandom(512)
    app.config["WTF_CSRF_ENABLED"]=True
    app.config["WTF_CSRF_SECRET_KEY"]=os.urandom(512)
    app.config["SERVER_OPTIONS"]=options
    app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://ptu:ptu@localhost:3306/ptu'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    import routes
    from blueprints.session import session
    app.register_blueprint(session)
    from blueprints.settings import settings
    app.register_blueprint(settings)
    from blueprints.map import map_blueprint
    app.register_blueprint(map_blueprint)
    from blueprints.data import data
    app.register_blueprint(data)
    from blueprints.rtlsdr import rtlsdr
    app.register_blueprint(rtlsdr)

    app.jinja_env.globals['bootstrap_is_hidden_field'] = is_hidden_field_filter

    if not options.debug:
        if options.verbosity <= 1: app.logger.setLevel(logging.ERROR)
        elif options.verbosity <= 2: app.logger.setLevel(logging.WARNING)
        elif options.verbosity <= 3: app.logger.setLevel(logging.INFO)
    else:
        app.logger.setLevel(logging.DEBUG)
        app.jinja_env.cache = None
        app.config['ASSETS_DEBUG'] = "merge"
        app.config['DEBUG'] = True
    app.config['ASSETS_CACHE'] = "/tmp"
    if options.trace:
        app.config['PROFILE'] = True
        app.wsgi_app = ProfilerMiddleware(app.wsgi_app, restrictions=[30])
    assets.init_app(app)
    db.init_app(app)
    app.config['SESSION_TYPE'] = 'sqlalchemy'
    app.config['SESSION_SQLALCHEMY'] = db
    sess.init_app(app)
    login_manager.init_app(app)
    login_manager.login_view = 'session.login'
    csrf.init_app(app)
    from navigation import nav
    nav.init_app(app)
    from lib.bootstraprenderer import BootstrapRenderer
    register_renderer(app, 'bootstrap', BootstrapRenderer)
    if options.ssl == True:
        from lib.ssl import getSSLContext
        # CERT_FILE, KEY_FILE = getSSLContext(app)
        # certfile=CERT_FILE, keyfile=KEY_FILE
        app.run(host=options.host,port=int(options.port),ssl_context=getSSLContext(app),debug=options.debug,threaded=True)
    else:
        app.run(app,host=options.host,port=int(options.port),debug=options.debug,threaded=True)
