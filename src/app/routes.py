from flask import Flask, session, request, flash, url_for, redirect, render_template, abort ,g, jsonify
from flask_login import login_user , logout_user , current_user , login_required
from . import app, db, login_manager
from lib.models import User
from lib.passwords import SystemPasswords
import random
import traceback
import hashlib
import os
from subprocess import Popen, PIPE

@app.route('/favicon.ico', methods=['GET'])
def favicon():
    return redirect(url_for('static',filename='favicon.ico'))

@app.after_request
def apply_caching(response):
    response.headers["Server"] = "Microsoft-IIS/8.0"
    response.headers["X-UA-Compatible"] = "IE=Edge,chrome=1"
    response.headers["X-Frame-Options"] = "SAMEORIGIN"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    if response.headers.get("ETag") is not None:
        del response.headers["ETag"]
    return response

"""
@app.errorhandler(404)
@app.errorhandler(500)
def errorpage(error):
    app.logger.error('Server Error: %s', (error))
    return render_template('error.html', error=error), error.code

@app.errorhandler(Exception)
def exceptionpage(error):
    app.logger.error('Server Error: %s', (error))
    return render_template('error.html', error=error), 500
"""

@app.before_first_request
def setup_db():
    # setup database models
    db.create_all()
    # make sure user exists
    user = User.query.filter_by(username='root').first()
    if user is None:
        user = User('root','toor')
        db.session.add(user)
        db.session.commit()

def menu(active=None):
    g.menu = {'dashboard':'','map':'','data':'','settings':'','passwords':''}
    if not active is None and not g.menu.get(active) is None:
        g.menu[active]='active'

@app.before_request
def check_app_state():
    """ redirect default rquests to demo app """
    if request.endpoint is None:
        return redirect(url_for('login'))
    g.user = current_user
    menu()

@login_manager.user_loader
def load_user(id):
    return User.query.get(int(id))

@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/login',methods=['GET','POST'])
def login():
    if request.method == 'GET':
        return render_template('pages/login.html')
    username = request.form['username'].lower()
    password = request.form['password']
    remember_me = False
    if 'remember_me' in request.form:
        remember_me = True
    registered_user = User.query.filter_by(username=username).first()
    if registered_user is None or registered_user.check_password(password) != True:
        flash('Username or Password is invalid' , 'danger')
        return redirect(url_for('login'))
    else:
        login_user(registered_user, remember=remember_me)
        if password == "toor":
            return redirect(url_for('passwords'))
        flash('Logged in successfully','success')
        return redirect(request.args.get('next') or url_for('dashboard'))

@app.route('/')
@login_required
def dashboard():
    menu('dashboard')
    return render_template('pages/dashboard.html')

@app.route('/user')
@login_required
def usettings():
    return render_template('pages/user/settings.html')

@app.route('/map',methods=['GET'])
@login_required
def map():
    menu('map')
    return render_template('pages/map.html')

@app.route('/data',methods=['GET'])
@login_required
def data():
    menu('data')
    return render_template('pages/data.html')

@app.route('/settings',methods=['GET'])
@login_required
def settings():
    menu('settings')
    return render_template('pages/settings.html')

@app.route('/settings/passwords',methods=['GET','POST'])
@login_required
def passwords():
    menu('passwords')
    if request.method == 'GET':
        return render_template('pages/settings/passwords.html')
    password = request.form['password']
    repeat = request.form['repeat']
    if password != repeat:
        flash('Password missmatch','danger')
        return render_template('pages/settings/passwords.html')
    if 'appuser' in request.form:
        if not SystemPasswords(db,g.user).app(password):
            flash('App password change error','danger')
            return render_template('pages/settings/passwords.html')
    if 'sshuser' in request.form:
        if not SystemPasswords.ssh(password):
            flash('SSH password change error','danger')
            return render_template('pages/settings/passwords.html')
    if 'wlanuser' in request.form:
        if len(password) < 8:
            flash('Password has to be at least 8 chars!','danger')
            return render_template('pages/settings/passwords.html')
        if not SystemPasswords.wlan(password):
            flash('WLAN password change error','danger')
            return render_template('pages/settings/passwords.html')
    flash('Setup completed','success')
    return redirect(url_for('logout'))
