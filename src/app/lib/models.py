from werkzeug.security import generate_password_hash, check_password_hash
from .. import db
from datetime import datetime

class User(db.Model):
    __tablename__ = "users"
    id = db.Column('user_id',db.Integer , primary_key=True)
    username = db.Column('username', db.String(255), unique=True , index=True)
    password = db.Column('password' , db.String(255))
    registered_on = db.Column('registered_on' , db.DateTime)

    def __init__(self , username ,password):
        self.username = username
        self.set_password(password)
        self.registered_on = datetime.utcnow()

    def set_password(self, password):
        self.password = generate_password_hash(password=password,method='pbkdf2:sha256:1000', salt_length=10)

    def check_password(self, password):
        return check_password_hash(self.password, password)

    def is_authenticated(self):
        return True

    def is_active(self):
        return True

    def is_anonymous(self):
        return False

    def get_id(self):
        return unicode(self.id)

    def __repr__(self):
        return '<User %r>' % (self.username)

class Gpsd(db.Model):
    __tablename__ = "gps"
    id = db.Column('gps_id',db.Integer,primary_key=True)
    fix = db.Column('fix',db.Boolean)
    lat = db.Column('lat',db.Float)
    lon = db.Column('lon',db.Float)
    alt = db.Column('alt',db.Float)
    speed = db.Column('speed',db.Float)
    heading = db.Column('heading',db.Float)
    climb = db.Column('climb',db.Float)
    total_satellites = db.Column('total_satellites',db.Integer)
    used_satellites = db.Column('used_satellites',db.Integer)
    disabled = db.Column('disabled',db.Boolean)

    def __init__(self, id, fix=False, lat=0.0, lon=0.0, alt=0.0, speed=0.0, heading=0.0, climb=0.0, total_satellites=0, used_satellites=0, disabled=True):
        self.id = id
        self.fix = fix
        self.lat = lat
        self.lon = lon
        self.alt = alt
        self.speed = speed
        self.heading = heading
        self.climb = climb
        self.total_satellites = total_satellites
        self.used_satellites = used_satellites
        self.disabled = disabled

    @property
    def json(self):
       """Return object data in easily serializeable format"""
       return {
           'fix': self.fix,
           'lat': self.lat,
           'lon': self.lon,
           'alt': self.alt,
           'speed': self.speed,
           'heading': self.heading,
           'climb': self.climb,
           'total_satellites': self.total_satellites,
           'used_satellites': self.used_satellites,
           'disabled': self.disabled
       }

class WiFi(db.Model):
    __tablename__ = "wifi"
    bssid = db.Column('bssid',db.BigInteger,primary_key=True,autoincrement=False)
    channel = db.Column('channel',db.Integer)
    lat = db.Column('lat',db.Float,index=True)
    lon = db.Column('lon',db.Float,index=True)
    alt = db.Column('alt',db.Float)
    ssid = db.Column('ssid',db.String(1024),index=True)
    crypto = db.Column('crypto',db.String(255))

    def __init__(self,bssid):
        self.bssid = WiFi.to_bssid(bssid)

    @staticmethod
    def to_bssid(bssid):
        if type(bssid) == str:
            return long('0x'+bssid.replace(':',''),16)
        hexstr = '%012x'%bssid
        return ':'.join([hexstr[i:i+2] for i in range(0, len(hexstr), 2)])

    @property
    def json(self):
       """Return object data in easily serializeable format"""
       return {
           'bssid': WiFi.to_bssid(self.bssid),
           'channel': self.channel,
           'lat': self.lat,
           'lon': self.lon,
           'alt': self.alt,
           'ssid': self.ssid,
           'crypto': self.crypto
       }
