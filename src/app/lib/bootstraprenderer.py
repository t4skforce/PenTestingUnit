from hashlib import sha1
from dominate import tags
from visitor import Visitor
from flask_nav.elements import *

class BootstrapView(View):
    def __init__(self, text, icon, endpoint, **kwargs):
        self.icon = icon
        self.text = text
        self.endpoint = endpoint
        self.url_for_kwargs = kwargs

class BootstrapSubgroup(Subgroup):
    def __init__(self, title, icon, *items):
        self.title = title
        self.icon = icon
        self.items = list(items)

class BootstrapRenderer(Visitor):
    def __init__(self):
        self._in_dropdown = False

    def visit_Navbar(self, node):
        root = tags.ul(_class='nav navbar-nav side-nav')
        for item in node.items:
            root.add(self.visit(item))
        return root

    def visit_Text(self, node):
        if not self._in_dropdown:
            return tags.p(node.text, _class='navbar-text')
        return tags.li(node.text, _class='dropdown-header')

    def visit_Link(self, node):
        item = tags.li()
        item.add(tags.a(node.text, href=node.get_url()))
        return item

    def visit_Separator(self, node):
        if not self._in_dropdown:
            raise RuntimeError('Cannot render separator outside Subgroup.')
        return tags.li(role='separator', _class='divider')

    def visit_Subgroup(self, node):
        if not self._in_dropdown:
            node_id = sha1(str(id(node)).encode()).hexdigest()
            li = tags.li(_class='dropdown')
            if node.active:
                li['class'] = 'active'
            a = li.add(tags.a(href='javascript:void(0);', _class='dropdown-toggle'))
            a.add(tags.i(_class='fa fa-fw fa-arrows-v'))
            a.add(node.title)
            a['data-toggle'] = 'collapse'
            a['data-target'] = '#'+node_id
            a['role'] = 'button'
            a['aria-haspopup'] = 'true'
            a['aria-expanded'] = 'false'
            if hasattr(node, 'icon') and node.icon != None:
                a.add(tags.i(_class='fa fa-fw fa-%s'%node.icon))

            ul = li.add(tags.ul(_class='collapse',id=node_id))

            active = node.active
            self._in_dropdown = True
            for item in node.items:
                ul.add(self.visit(item))
                if item.active:
                    active=True
            self._in_dropdown = False

            if active == True:
                li['class'] = 'sub_active'
                ul['class']='collapse in'

            return li
        else:
            raise RuntimeError('Cannot render nested Subgroups')

    def visit_View(self, node):
        item = tags.li()
        a = item.add(tags.a(node.text, href=node.get_url(), title=node.text))
        if hasattr(node, 'icon') and node.icon != None:
            a.add(tags.i(_class='fa fa-fw fa-%s'%node.icon))
        if node.active:
            item['class'] = 'active'
        return item
